package com.weathernews.Weather;

import java.util.ArrayList;

import com.weathernews.Weather.SearchCity.CityList3;
import com.weathernews.Weather.SearchCity.CityList3Adapter;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ListActivity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CheckedTextView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

public class DeleteThemeList extends ListActivity {
	private Button confirm;
	private Button cancel;
	private int nCityCnt;
	private List2 sortlist;
	private List2[] arrayList;
	private ArrayList<List2> data = new ArrayList<List2>();
	private SortListAdapter mAdapter;
//	private CheckedTextView selectAll;
	private LinearLayout selectAll;
	private CheckedTextView check;
	
	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.delweatherlist);
        confirm = (Button) findViewById(R.id.delweatherlist_confirm);
        cancel = (Button) findViewById(R.id.delweatherlist_cancel);
        
        check = (CheckedTextView) findViewById(R.id.delete_check);
        
        confirm.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				//delList();
				
				SharedPreferences.Editor prefs1 = getSharedPreferences(Const.PREFS_NAME, 0).edit();
				
				
				int selectCnt = getSelectedCount();
				//Log.d("myTag", "selectCnt=" + selectCnt);
				if(selectCnt > 0) {
					for(int i = 0 ; i < nCityCnt ; i++){
						prefs1.remove(Const.THEME_LIST + i);
					}
					for(int i = 0, j = 0 ; i < nCityCnt ; i ++) {
						//Log.d("myTag", "checked=" + arrayList[i].getisChecked());
						if(arrayList[i].getisChecked() == false){
							prefs1.putString(Const.THEME_LIST + j, arrayList[i].toTSVString());
							j++;
						}
					}
					prefs1.putInt(Const.THEME_CNT, nCityCnt - selectCnt);
					prefs1.commit();
					setResult(RESULT_OK, (new Intent()).setAction(""));
					finish();
				} else {
					AlertDialog.Builder alert = new AlertDialog.Builder(DeleteThemeList.this);
				    alert.setTitle( "알림" );
				    alert.setIcon(R.drawable.ic_dialog_menu_generic);
				    alert.setMessage("선택한 목록이 없습니다.");

				    alert.setPositiveButton( "확인", new DialogInterface.OnClickListener() {
					    @Override
						public void onClick( DialogInterface dialog, int which) {
					    	dialog.dismiss();
					    }
					});
				    alert.show();
				}
			}
		});
        
        cancel.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				setResult(RESULT_CANCELED, (new Intent()).setAction(""));
				finish();
			}
		});
        
        selectAll = (LinearLayout) findViewById(R.id.delete_select);
        selectAll.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				check.setChecked(!check.isChecked());
				for(int i = 0 ; i < nCityCnt ; i ++) {
					arrayList[i].setisChecked(check.isChecked());
				}
				
				RedrawList();
			}
		});
        
		String Temp = null;
		String[] szTemp;
		SharedPreferences prefs = getSharedPreferences(Const.PREFS_NAME, 0);
		
		if(prefs == null){
			nCityCnt = 0;
		}
		
		nCityCnt = prefs.getInt(Const.THEME_CNT, 0);
		
		arrayList = new List2[nCityCnt];
		
		for(int i = 0 ; i < nCityCnt ; i++){
			Temp = prefs.getString(Const.THEME_LIST + i, "");
			szTemp = Temp.split("\t");
			if(szTemp.length >= 10) {
				sortlist = new List2(szTemp[0], szTemp[1], szTemp[2], szTemp[3], szTemp[4], szTemp[5], szTemp[6], szTemp[7], szTemp[8], szTemp[9], false);
				arrayList[i] = sortlist;
				data.add(sortlist);
			}
		}

        mAdapter = new SortListAdapter(this, R.layout.search_row, data);
        setListAdapter(mAdapter);
    }
	
    protected int getSelectedCount() {
		// TODO Auto-generated method stub
    	int nCnt = 0;
    	for(int i = 0 ; i < nCityCnt ; i ++) {
    		if(arrayList[i].getisChecked() == true)
    			nCnt ++;
    	}
		return nCnt;
	}

	private void RedrawList(){
    	data = new ArrayList<List2>();
    	mAdapter = new SortListAdapter(this, R.layout.search_row, data);
		setListAdapter(mAdapter);
		
		for(int i = 0 ; i < nCityCnt ; i++){
			data.add(arrayList[i]);
		}
    }

	
	@Override
    protected void onListItemClick(ListView l, View v, int position, long id) {
		super.onListItemClick(l, v, position, id);
		boolean isCheckAll = true;
		LinearLayout listview = null;
		try{
			listview = (LinearLayout) v;
		} catch (ClassCastException e) {
			return;
		}
		//Log.d("myTag", "position=" + position + " id=" + id);
		
		CheckedTextView ctv = (CheckedTextView)listview.getChildAt(0);
		
		ctv.setChecked(!ctv.isChecked());
		//Log.d("myTag", "SelectedText is " + ctv.getText());
		
		arrayList[position].setisChecked(!arrayList[position].getisChecked());
		//Log.d("myTag", "Select CityID=" + arrayList[position].toTSVString());
		
		for(int i = 0 ; i < arrayList.length ; i ++) {
			if(arrayList[i].getisChecked() == false){
				isCheckAll = false;
				break;
			}
				
		}
		check.setChecked(isCheckAll);
    }

	class List2 {
		private CheckedTextView City;
		private String szThemeCode;
    	private String szAreaCode;
    	private String szName;
    	private String szAddress;
    	private String szWeatherComment;
    	private String szIcon;
    	private String szTempCur;
    	private String szTempMax;
    	private String szTempMin;
    	private String szThemeID;
    	
    	public List2( String ThemeCode, String code, String Name, String address, String szWC, String Icon,
    			String Tcur, String TMax, String TMin, String themeid, boolean isChecked ){
    		this.szThemeCode = ThemeCode;
    		this.szAreaCode = code;
    		this.szName = Name;
    		this.szAddress = address;
    		this.szWeatherComment = szWC;
    		this.szIcon = Icon;
    		this.szTempCur = Tcur;
    		this.szTempMax = TMax;
    		this.szTempMin = TMin;
    		this.szThemeID = themeid;
    		
    		City = new CheckedTextView(getBaseContext());
    		this.City.setText(Name);
    		this.City.setChecked(isChecked);
    	}
    	
    	public String getThemeCode(){
    		return szThemeCode;
    	}
    	
    	public String getAreaCode(){
    		return szAreaCode;
    	}
    	
    	public String getName(){
    		return szName;
    	}
    	
    	public String getAddress(){
    		return szAddress;
    	}
    	
    	public String getComment(){
    		return szWeatherComment;
    	}
    	
    	public String getTempCur(){
    		return szTempCur;
    	}
    	
    	public String getIcon(){
    		return szIcon;
    	}
    	
    	public String getTempMax(){
    		return szTempMax;
    	}
    	
    	public String getTempMin(){
    		return szTempMin;
    	}
    	
    	public String getThemeID(){
    		return szThemeID;
    	}
    	
    	public String toTSVString(){
    		return szThemeCode + "\t" + szAreaCode + "\t" + szName + "\t" + szAddress + "\t" + szWeatherComment + "\t" + 
    				szIcon + "\t" + szTempCur + "\t" + szTempMax + "\t" + szTempMin + "\t" + szThemeID;
    	}
    		
    	public boolean getisChecked(){
    		return City.isChecked();
    	}
    	
    	public void setisChecked(boolean isChecked){
    		City.setChecked(isChecked);
    	}
    }
	
	public class SortListAdapter extends ArrayAdapter<List2> {
		private ArrayList<List2> items;

    	public SortListAdapter(Context context, int textViewResourceId,
				ArrayList<List2> objects) {
			super(context, textViewResourceId, objects);
			this.items = objects;
		}

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
                View v = convertView;
                if (v == null) {
                    LayoutInflater vi = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                    v = vi.inflate(R.layout.search_row, null);
                }
                List2 p = items.get(position);
                if (p != null) {
                	String szCity = p.getName();
                    CheckedTextView tv = (CheckedTextView) v.findViewById(R.id.text);
                    tv.setText(szCity);
                    tv.setChecked(p.getisChecked());
                }
                return v;
        }
    }
}
